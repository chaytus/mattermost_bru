[project]
name = "mattermost_bru"
dynamic = ["version"]
description = "Backup, restore, and update Mattermost."
authors = [
    {name = "Brady Fry", email = "bradyfry@chaytus.com"},
]
dependencies = [
    "loguru>=0.7.2",
    "click>=8.1.7",
]
requires-python = "==3.11.*"
readme = "README.md"
license = {text = "MIT"}


[project.optional-dependencies]
app = [
    "nuitka>=2.0.1",
]
[tool.pdm]
distribution = false

[tool.pdm.version]
source = "file"
path = "src/configs/__init__.py"

[tool.pdm.dev-dependencies]
dev = [
    "pre-commit>=3.6.0",
    "ruff>=0.2.0",
    "pytest>=8.0.0",
]

[tool.pdm.scripts]
compile = "python -m nuitka --follow-imports -o ip_checker --remove-output src/main.py"
test = "pytest"

[tool.pytest.ini_options]
pythonpath = ["src"]

[tool.ruff]
line-length = 100
indent-width = 4

[tool.ruff.lint]
select = [
    #    "A",
    #    "ANN",
    #    "ARG",
    "B",
    #    "BLE",
    #    "C",
    "C4",
    #    "COM",
    #    "D",
    #    "DTZ",
    #    "E",
    #    "ERA",
    #    "EXE",
    #    "F",
    #    "FBT",
    #    "G",
    #    "I",
    #    "ICN",
    #    "INP",
    #    "ISC",
    #    "N",
    "PGH",
    #    "PIE",
    #    "PL",
    #    "PLC",
    #    "PLE",
    #    "PLR",
    #    "PLW",
    #    "PT",
    #    "PYI",
    #    "Q",
    #    "RUF",
    #    "RSE",
    #    "RET",
    #    "S",
    "SIM",
    #    "SLF",
    #    "T",
    #    "T10",
    #    "T20",
    "TCH",
    #    "TID",
    #    "TRY",
    #    "UP",
    #    "W",
    #    "YTT",
    "NPY", # NUMPY-specific rules
    "B", # flake8-bugbear
    "C4", # flake8-comprehensions
    "E", # pycodestyle errors
    "F", # pyflakes
    "PGH", # pygrep-hooks
    "RUF", # ruff
    "W", # pycodestyle warnings
    "YTT", # flake8-2020
    "D", # pydocstyle
]
ignore = ["D211", "D213"]
#ignore = [
#    "A001",  # Variable is shadowing a Python builtin
#    "ANN101",  # Missing type annotation for self
#    "ANN102",  # Missing type annotation for cls
#    "ANN204",  # Missing return type annotation for special method __str__
#    "ANN401",  # Dynamically typed expressions (typing.Any) are disallowed
#    "ARG005",  # Unused lambda argument
#    "C901",  # Too complex
#    "D105",  # Missing docstring in magic method
#    "D417",  # Missing argument description in the docstring
#    "E501",  # Line too long
#    "ERA001",  # Commented out code
#    "G004",  # Logging statement uses f-string
#    "PLR0911",  # Too many return statements
#    "PLR0912",  # Too many branches
#    "PLR0913",  # Too many arguments to function call
#    "PLR0915",  # Too many statements
#    "SLF001", # Private member accessed
#    "TRY003",  # Avoid specifying long messages outside the exception class
#]
extend-ignore = ["B018", "B019"]

# Allow fix for all enabled rules (when `--fix`) is provided.
fixable = ["ALL"]
unfixable = []

# Allow unused variables when underscore-prefixed.
dummy-variable-rgx = "^(_+|(_+[a-zA-Z0-9_]*[a-zA-Z0-9]+?))$"

[tool.ruff.format]
# Like Black, use double quotes for strings.
quote-style = "double"

# Like Black, indent with spaces, rather than tabs.
indent-style = "space"

# Like Black, respect magic trailing commas.
skip-magic-trailing-comma = false

# Like Black, automatically detect the appropriate line ending.
line-ending = "auto"

[tool.ruff.lint.pycodestyle]
max-doc-length = 88

[tool.ruff.lint.flake8-annotations]
suppress-none-returning = true

[tool.ruff.lint.pydocstyle]
convention = "numpy"
